- name: delete kube-router network_plugin
  shell: "kubectl delete -f {{ yaml_dir }}/kube-router.yaml"
  delegate_to: "{{ groups['k8s-console'][0] }}"
  ignore_errors: true
  run_once: yes

- name: uninstall kube-router relationship files if exists
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/cni/net.d/*

- name: sync kube cni plugin binary to each node
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
  with_items:
    - { src: "{{ cni_binary_dir }}/bridge", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/dhcp", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/flannel", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/host-device", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/host-local", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/ipvlan", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/loopback", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/macvlan", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/portmap", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/ptp", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/sample", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/tuning", dest: "{{ kube_cni_bin_dir }}/" }
    - { src: "{{ cni_binary_dir }}/vlan", dest: "{{ kube_cni_bin_dir }}/" }


- name: sync calico require certs
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "{{ certs_dir }}/ca.pem", dest: "{{ kube_certs_dir }}/" }
    - { src: "{{ certs_dir }}/etcd.pem", dest: "{{ kube_certs_dir }}/" }
    - { src: "{{ certs_dir }}/etcd-key.pem", dest: "{{ kube_certs_dir }}/" }

# - name: sync 10-calico.conf
#   with_items:
#     - cc: 10-calico.conflist
#       d: /etc/cni/net.d
#   template:
#     src: "{{ item.cc }}.j2"
#     dest: "{{ item.d }}/{{ item.cc }}"
#     mode: 0644
#   when: (ansible_hostname in groups['k8s-node'])

- name: install calico-node service unit
  with_items:
    - cn: calico-node.service
      d: /usr/lib/systemd/system
  template:
    src: "{{ item.cn }}.j2"
    dest: "{{ item.d }}/{{ item.cn }}"
    mode: 0644
  notify:
    - reload systemd

- name: make sure calico node service  running
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - calico-node

- name: systemctl daemon-reload
  systemd:
    name: "{{ item }}"
    state: restarted
    daemon_reload: yes
  with_items:
    - calico-node

- name: create yaml file require directory
  file:
    path: "{{ yaml_dir }}"
    state: directory
  delegate_to: "{{ groups['k8s-console'][0] }}"

- name: gather certs for calico etcd endpoints
  slurp:
    src: "{{ item }}"
  register: calico_etcd_certs
  with_items:
    - "{{ certs_dir }}/ca.pem"
    - "{{ certs_dir }}/etcd.pem"
    - "{{ certs_dir }}/etcd-key.pem"
  delegate_to: "{{ groups['k8s-console'][0] }}"

- name: Generate Deployment YAML
  template:
    src: "calico.yaml.j2"
    dest: "{{ yaml_dir }}/calico.yaml"
  delegate_to: "{{ groups['k8s-console'][0] }}"

- name: create calico network_plugin
  shell: "kubectl apply -f {{ yaml_dir }}/calico.yaml"
  delegate_to: "{{ groups['k8s-console'][0] }}"
  run_once: yes
